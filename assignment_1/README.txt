How to run: Στον φάκελο υπάρχει “Makefile”, οπότε αρκεί να πληκτρολογήσετε “make” 
και έπειτα “./demoprogram”. 

Στο “demoprogram.c” περιέχεται η main() μέθοδος και μέσα σε αυτή καλούνται οι 3 κρυπτογραφικοί 
αλγόριθμοι που ζητήθηκαν (One-time pad, Caesar’s Cipher, Vigenere’s cipher). Οι αλγόριθμοι 
υλοποιούνται στο “simple_crypto.c” και η “simple_crypto.h” είναι η βιβλιοθήκη. 

Καθώς η είσοδος από το χρήστη είναι ακαθορίστου μεγέθους χρησιμοποιήθηκε η inputString() για την 
ανάγνωση χαρακτήρων και δέσμευση μνήμης δυναμικά. Σε αυτή έγινε μια παραλλαγή έτσι ώστε να αγνοούνται 
όσοι χαρακτήρες δεν είναι γράμματα του αγγλικού αλφάβητου ή αριθμοί. 

Σε κάθε αλγόριθμο ζητείται αρχικά η φράση που θα κρυπτογραφηθεί και έπειτα το κλειδί. Στη συνέχεια 
καλείται η xxxEncrypt για την κρυπτογράφηση και με το αποτέλεσμα αυτής καλείται η xxxDecrypt για 
την αποκρυπτογράφηση της φράσης (οπού xxx το όνομα του αλγορίθμου). 

OneTimePad: Σημαντικός παράγοντας στην υλοποίηση του συγκεκριμένου αλγορίθμου ήταν η παραγωγή του
τυχαίου κλειδιού από το αρχείο “/dev/urandom” έτσι ώστε με ένα XOR στο encrypt και παρόμοια στο 
decrypt να γίνει η κρυπτογράφηση και η αποκρυπτογράφηση αντίστοιχα. Στη μέθοδο randomKeyGenerator() 
παράγεται αυτό το τυχαίο κλειδί διαβάζοντας printable χαρακτήρες μέχρι το κλειδί να έχει το ίδιο 
μέγεθος με την φράση που θέλουμε να κρυπτογραφήσουμε. 

Caesar’s Cipher: Παρόμοια και εδώ ζητείται η φράση και το κλειδί για κρυπτογράφηση, μόνο που εδώ 
το κλειδί πρέπει να είναι αριθμός και καθορίζει τις θέσεις που θα μετακινηθεί ο pointer στον ASCII table. 
Όπως ζητήθηκε η μετατόπιση (shift) γίνεται κυκλικά με την προτεραιότητα που εμφανίζονται οι χαρακτήρες. 
Δηλαδή μετά τους αριθμούς ακολουθούν τα κεφαλαία γράμματα, έπειτα τα πεζά γράμματα και στην συνέχεια πάλι 
οι αριθμοί. 

Vigenere’s Cipher: Σε αυτή τη περίπτωση η είσοδος από τον χρήστη, της φράσης καθώς και του κλειδιού 
μπορεί να γίνει μόνο με κεφαλαία γράμματα και για να επιτευχθεί αυτό γίνονται οι απαραίτητοι έλεγχοι. 
Η μέθοδος generateKey() παράγει το κλειδί που θα χρησιμοποιηθεί για την κρυπτογράφηση και το οποίο έχει 
το ίδιο μέγεθος με την φράση που επιθυμούμε να κρυπτογραφήσουμε. Για να παραχθεί αυτό το κλειδί επαναλαμβάνουμε 
το κλειδί του χρήστη μέχρι να γίνει ίδιο σε μέγεθος με την φράση που έχει δώσει. Η κρυπτογράφηση σε αυτό 
τον αλγόριθμο γίνεται στην ουσία μετακινώντας την θέση του γράμματος τόσες θέσεις όσες η θέση του γράμματος 
του κλειδιού στο αγγλικό αλφάβητο. Δηλαδή A(0)+L(11)-> L(11), το Α μετακινήθηκε 11 θέσεις καθώς στο κλειδί 
ήταν το γράμμα L(11), K(10) + E(4)-> O(14). Η αποκρυπτογράφηση λειτουργεί παρόμοια. 

 

gcc –version: “gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0” 

InputString():  https://stackoverflow.com/questions/16870485/how-can-i-read-an-input-string-of-unknown-length 